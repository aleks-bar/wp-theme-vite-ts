body {
  font-family         : "Onest", sans-serif;
  font-optical-sizing : auto;
  font-style          : normal;
  font-size           : map-get($text-sizes, text, md, default, font-size);
  line-height         : map-get($main_settings, 'line-height');
  color               : map-get($main_settings, 'text-color');

  @each $breackpoint, $breackpoint_value in map-get($text-sizes, text, md, breakpoints) {
    @media (min-width: map-get($breakpoints-min, $breackpoint)) {
      font-size: map-get($breackpoint_value, font-size);
    }
  }
}

p {
  margin-top : 0;
  &:not(:last-child) {
    margin-bottom : map-get($main_settings, 'redactor-elem-margin-bottom');
  }
  &:last-child {
    margin-bottom : 0;
  }
}

a {
  color: inherit;
  text-decoration: inherit;
  &:not(.link-reset) {
    transition: color .15s;

    svg {
      transition: fill .15s;
    }

    &:hover {
      color: #0091FF;
      svg {
        fill: #0091FF;
      }
    }
  }
}

ul,ol {
  &.list-reset {
    margin : 0;
    padding : 0;
    list-style-type : none;
    list-style-position  : inside;
  }
  &:not(.list-reset){
    li:not(:last-child) {
      margin-bottom : map-get($main_settings, 'redactor-elem-margin-bottom');
    }
  }
}

h1, h2, h3, h4, h5, h6 {
  margin-top : 0;
  font-weight   : map-get($main_settings, 'title-font-weght');
  margin-bottom : map-get($main_settings, 'title-margin-bottom');
}

// ------ text sizes ------ start
@each $text-style, $text-size in $text-sizes {
  .#{$text-style} {
    @each $size-name, $size-value in $text-size {
      &-#{$size-name} {
        // mobile style for size
        line-height : map-get($size-value, 'default', 'line-height');
        font-size   : map-get($size-value, 'default', 'font-size');
        @if map-get($size-value, 'default', 'letter-spacing') != null {
          letter-spacing : map-get($size-value, 'default', 'letter-spacing');
        }

        // breakpoints
        @each $breakpoint, $breakpoint-value in map-get($size-value, 'breakpoints') {
          @media (min-width : map-get($breakpoints-min, $breakpoint)) {
            font-size : map-get($breakpoint-value, 'font-size');
            @if map-get($breakpoint-value, 'letter-spacing') != null {
              letter-spacing : map-get($breakpoint-value, 'letter-spacing');
            }
            @if map-get($breakpoint-value, 'line-height') != null {
              line-height : map-get($breakpoint-value, 'line-height');
            }
          }
        }
      }
    }
  }
}

// ------ text sizes ------ end

.uppercase {
  text-transform : uppercase;
}

@each $font-weight in map-values($fonts-weights) {
  .font-#{$font-weight} {
    font-weight : $font-weight;
  }
}
